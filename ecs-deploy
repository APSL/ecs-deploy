#!/bin/bash

function usage() {
    set -e
    cat <<EOM
    ##### ecs-deploy #####
    Simple script for triggering blue/green deployments on Amazon Elastic Container Service
    https://github.com/APSL/ecs-deploy
    Forked from
    https://github.com/silinternational/ecs-deploy

    Required arguments:
        -k | --aws-access-key   AWS Access Key ID. May also be set as environment variable AWS_ACCESS_KEY_ID
        -s | --aws-secret-key   AWS Secret Access Key. May also be set as environment variable AWS_SECRET_ACCESS_KEY
        -r | --region           AWS Region Name. May also be set as environment variable AWS_DEFAULT_REGION
        -c | --cluster          Name of ECS cluster
        -n | --service-name     Name of service to deploy
        -t | --tag            Name of new tag to run

    Optional arguments:
        -t | --timeout          Default is 180s. Script monitors ECS Service for new task definition to be running.

    Example:
        ecs-deploy -k ABC123 -s SECRETKEY -c production1 -n doorman-service -i docker.repo.com/doorman:latest

EOM

    exit 2
}

if [ $# == 0 ]; then usage; fi

# Setup default values for variables
CLUSTER=false
SERVICE=false
TAG=false
TIMEOUT=180
VERBOSE=false

# AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY can be set as environment variables 
if [ -z ${AWS_ACCESS_KEY_ID+x} ]; then AWS_ACCESS_KEY_ID=false; fi
if [ -z ${AWS_SECRET_ACCESS_KEY+x} ]; then AWS_SECRET_ACCESS_KEY=false; fi
if [ -z ${AWS_DEFAULT_REGION+x} ]; then AWS_DEFAULT_REGION='eu-west-1'; fi

# Loop through arguments, two at a time for key and value
while [[ $# > 0 ]]
do
    key="$1"

    case $key in
        -k|--aws-access-key)
            AWS_ACCESS_KEY_ID="$2"
            shift # past argument
            ;;
        -s|--aws-secret-key)
            AWS_SECRET_ACCESS_KEY="$2"
            shift # past argument
            ;;
        -c|--cluster)
            CLUSTER="$2"
            shift # past argument
            ;;
        -n|--service-name)
            SERVICE="$2"
            shift # past argument
            ;;
        -t|--tag)
            TAG="$2"
            shift
            ;;
        -t|--timeout)
            TIMEOUT="$2"
            shift
            ;;
        -v|--verbose)
            VERBOSE=true
            ;;
        *)
            usage
            exit 2
        ;;
    esac
    shift # past argument or value
done

if [ $VERBOSE == true ]; then
    set -x
fi

# If not aws config check if the AWS envs are available
if [ ! -f ~/.aws/config ]; then

    # Make sure we have all the variables needed: AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, CLUSTER, SERVICE, TAG
    if [ $AWS_ACCESS_KEY_ID == false ]; then 
        echo "AWS_ACCESS_KEY_ID is required. You can set it as an environment variable or configuring a file ~/.aws/config"
        exit 1
    fi
    if [ $AWS_SECRET_ACCESS_KEY == false ]; then 
        echo "AWS_SECRET_ACCESS_KEY is required. You can set it as an environment variable or configuring a file ~/.aws/config"
        exit 1
    fi
    
fi

if [ $CLUSTER == false ]; then 
    echo "CLUSTER is required. You can pass the value using -c or --cluster"
    exit 1
fi
if [ $SERVICE == false ]; then 
    echo "SERVICE is required. You can pass the value using -n or --service-name"
    exit 1
fi
if [ $TAG == false ]; then 
    echo "TAG is required. You can pass the value using -t or --tag"
    exit 1
fi

# Get current task definition name from service
TASK_DEFINITION=`aws ecs describe-services --services $SERVICE --cluster $CLUSTER | jq .services[0].taskDefinition | tr -d '"'`
echo "Current task definition: $TASK_DEFINITION";

# Get a JSON representation of the current task definition
aws ecs describe-task-definition --task-def $TASK_DEFINITION > def

# get old tag
OLDTAG=$(cat def |grep '"image":'|head -n 1|cut -d ':' -f 3|cut -d '"' -f 1)

# replace new tag
sed -i def  -e "s/$OLDTAG/$TAG/"

# Filter the def
jq < def > newdef '.taskDefinition|{family: .family, volumes: .volumes, containerDefinitions: .containerDefinitions}'

# Register the new task definition, and store its ARN
NEW_TASKDEF=`aws ecs register-task-definition --family ${SERVICE}-${TAG} --cli-input-json file://newdef | jq .taskDefinition.taskDefinitionArn | tr -d '"'`
echo "New task definition: $NEW_TASKDEF";

echo "Start update with count tasks = 1..."

# Update the service with the count 1 and wait
UPDATE=`aws ecs update-service --desired-count 1 --cluster $CLUSTER --service $SERVICE --task-definition $NEW_TASKDEF`

# See if the service is able to come up again
every=10
i=0
task1=0
while [ $i -lt $TIMEOUT ] 
do
  # Scan the list of running tasks for that service, and see if one of them is the
  # new version of the task definition
  rm -f tasks
  
  aws ecs list-tasks --cluster $CLUSTER  --service-name $SERVICE --desired-status RUNNING \
    | jq '.taskArns[]' \
    | xargs -I{} aws ecs describe-tasks --cluster $CLUSTER --tasks {} >> tasks
  
  jq < tasks > results ".tasks[]| if .taskDefinitionArn == \"$NEW_TASKDEF\" then . else empty end|.lastStatus"
  
  RUNNING=`grep -e "RUNNING" results`

  NUM_TASKS=`aws ecs list-tasks --cluster $CLUSTER  --service-name $SERVICE --desired-status RUNNING \
    | jq '.taskArns[]' | wc -l`
  
  if [ $RUNNING ] && [ $NUM_TASKS -eq 1 ]; then
    echo "Service updated successfully, new task definition is updated. Count tasks = 1.";
    task1=1
    i=$TIMEOUT
  fi
  
  sleep $every
  i=$(( $i + $every ))
done

# Timeout
if [ $task1 -eq 0 ]; then
    echo "ERROR: New task definition not running within $TIMEOUT seconds (desired-count = 1)"
    exit 1
fi

echo "Start update with count tasks = 2..."

# Update the service with the count 2 and wait
UPDATE=`aws ecs update-service --desired-count 2 --cluster $CLUSTER --service $SERVICE`

# See if the service is able to come up again
every=10
i=0
while [ $i -lt $TIMEOUT ] 
do
  # Scan the list of running tasks for that service, and see if one of them is the
  # new version of the task definition
  rm -f tasks
  
  aws ecs list-tasks --cluster $CLUSTER  --service-name $SERVICE --desired-status RUNNING \
    | jq '.taskArns[]' \
    | xargs -I{} aws ecs describe-tasks --cluster $CLUSTER --tasks {} >> tasks
  
  jq < tasks > results ".tasks[]| if .taskDefinitionArn == \"$NEW_TASKDEF\" then . else empty end|.lastStatus"
  
  RUNNING=`cat results|grep RUNNING|wc -l`
  
  NUM_TASKS=`aws ecs list-tasks --cluster $CLUSTER  --service-name $SERVICE --desired-status RUNNING \
    | jq '.taskArns[]' | wc -l`

  if [ $RUNNING -eq 2 ] && [ $NUM_TASKS -eq 2 ]; then
    echo "Service updated successfully, new task definition running is running with count tasks = 2.";
    exit 0
  fi
  
  sleep $every
  i=$(( $i + $every ))
done

# Timeout
echo "ERROR: New task definition not running within $TIMEOUT seconds (desired-count = 2)"
exit 1
